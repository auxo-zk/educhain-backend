/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IDAOFactoryInterface extends Interface {
  getFunction(nameOrSignature: "createDAO" | "daos"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "DAOCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "createDAO",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "daos", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "createDAO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "daos", data: BytesLike): Result;
}

export namespace DAOCreatedEvent {
  export type InputTuple = [
    daoId: BigNumberish,
    daoAddress: AddressLike,
    creator: AddressLike,
    descriptionHash: BytesLike
  ];
  export type OutputTuple = [
    daoId: bigint,
    daoAddress: string,
    creator: string,
    descriptionHash: string
  ];
  export interface OutputObject {
    daoId: bigint;
    daoAddress: string;
    creator: string;
    descriptionHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IDAOFactory extends BaseContract {
  connect(runner?: ContractRunner | null): IDAOFactory;
  waitForDeployment(): Promise<this>;

  interface: IDAOFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createDAO: TypedContractMethod<
    [_expectedId: BigNumberish, _descriptionHash: BytesLike],
    [bigint],
    "payable"
  >;

  daos: TypedContractMethod<[_daoId: BigNumberish], [string], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createDAO"
  ): TypedContractMethod<
    [_expectedId: BigNumberish, _descriptionHash: BytesLike],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "daos"
  ): TypedContractMethod<[_daoId: BigNumberish], [string], "nonpayable">;

  getEvent(
    key: "DAOCreated"
  ): TypedContractEvent<
    DAOCreatedEvent.InputTuple,
    DAOCreatedEvent.OutputTuple,
    DAOCreatedEvent.OutputObject
  >;

  filters: {
    "DAOCreated(uint256,address,address,bytes32)": TypedContractEvent<
      DAOCreatedEvent.InputTuple,
      DAOCreatedEvent.OutputTuple,
      DAOCreatedEvent.OutputObject
    >;
    DAOCreated: TypedContractEvent<
      DAOCreatedEvent.InputTuple,
      DAOCreatedEvent.OutputTuple,
      DAOCreatedEvent.OutputObject
    >;
  };
}
