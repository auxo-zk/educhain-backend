/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ICampaign {
  export type CourseStruct = {
    governor: AddressLike;
    fund: BigNumberish;
    minted: BigNumberish;
    descriptionHash: BytesLike;
  };

  export type CourseStructOutput = [
    governor: string,
    fund: bigint,
    minted: bigint,
    descriptionHash: string
  ] & {
    governor: string;
    fund: bigint;
    minted: bigint;
    descriptionHash: string;
  };
}

export interface CampaignInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allocateFunds"
      | "campaignData"
      | "campaignFounders"
      | "campaignsOwn"
      | "courseData"
      | "fund"
      | "governorFactory"
      | "initialize"
      | "investedCampaignList"
      | "investedGovernorInACampaignList"
      | "investedGovernorList"
      | "isInvestedCampaign"
      | "isInvestedGovernor"
      | "isInvestedGovernorInACampaign"
      | "joinCampaign"
      | "joinedCampaign"
      | "launchCampaign"
      | "nextCampaignId"
      | "owner"
      | "renounceOwnership"
      | "setGovernorFactory"
      | "state"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CampaignLaunched"
      | "Fund"
      | "FundAllocated"
      | "GovernorJoined"
      | "Initialized"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allocateFunds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "campaignData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "campaignFounders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "campaignsOwn",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "courseData",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fund",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "governorFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "investedCampaignList",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "investedGovernorInACampaignList",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "investedGovernorList",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isInvestedCampaign",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isInvestedGovernor",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isInvestedGovernorInACampaign",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "joinCampaign",
    values: [BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "joinedCampaign",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "launchCampaign",
    values: [BigNumberish, BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nextCampaignId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernorFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "state", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "allocateFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignFounders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignsOwn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "courseData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "governorFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "investedCampaignList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investedGovernorInACampaignList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investedGovernorList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInvestedCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInvestedGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInvestedGovernorInACampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinedCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "launchCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextCampaignId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernorFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace CampaignLaunchedEvent {
  export type InputTuple = [campaignId: BigNumberish];
  export type OutputTuple = [campaignId: bigint];
  export interface OutputObject {
    campaignId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundEvent {
  export type InputTuple = [
    campaignId: BigNumberish,
    governorId: BigNumberish,
    amount: BigNumberish,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [
    campaignId: bigint,
    governorId: bigint,
    amount: bigint,
    tokenId: bigint
  ];
  export interface OutputObject {
    campaignId: bigint;
    governorId: bigint;
    amount: bigint;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundAllocatedEvent {
  export type InputTuple = [
    campaignId: BigNumberish,
    governorIds: BigNumberish[]
  ];
  export type OutputTuple = [campaignId: bigint, governorIds: bigint[]];
  export interface OutputObject {
    campaignId: bigint;
    governorIds: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GovernorJoinedEvent {
  export type InputTuple = [campaignId: BigNumberish, governorId: BigNumberish];
  export type OutputTuple = [campaignId: bigint, governorId: bigint];
  export interface OutputObject {
    campaignId: bigint;
    governorId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Campaign extends BaseContract {
  connect(runner?: ContractRunner | null): Campaign;
  waitForDeployment(): Promise<this>;

  interface: CampaignInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allocateFunds: TypedContractMethod<
    [campaignId: BigNumberish],
    [void],
    "nonpayable"
  >;

  campaignData: TypedContractMethod<
    [campaignId: BigNumberish],
    [
      [bigint, string, bigint, bigint, boolean, string, bigint[]] & {
        totalFunded: bigint;
        descriptionHash: string;
        fundStart: bigint;
        fundDuration: bigint;
        allocated: boolean;
        tokenRaising: string;
        governorIds: bigint[];
      }
    ],
    "view"
  >;

  campaignFounders: TypedContractMethod<
    [campaignId: BigNumberish],
    [string],
    "view"
  >;

  campaignsOwn: TypedContractMethod<[_owner: AddressLike], [bigint[]], "view">;

  courseData: TypedContractMethod<
    [campaignId: BigNumberish, governorId: BigNumberish],
    [ICampaign.CourseStructOutput],
    "view"
  >;

  fund: TypedContractMethod<
    [campaignId: BigNumberish, governorId: BigNumberish, amount: BigNumberish],
    [bigint],
    "payable"
  >;

  governorFactory: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [initialOwner_: AddressLike],
    [void],
    "nonpayable"
  >;

  investedCampaignList: TypedContractMethod<
    [investor: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  investedGovernorInACampaignList: TypedContractMethod<
    [investor: AddressLike, campaignId: BigNumberish, arg2: BigNumberish],
    [string],
    "view"
  >;

  investedGovernorList: TypedContractMethod<
    [investor: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  isInvestedCampaign: TypedContractMethod<
    [investor: AddressLike, campaignId: BigNumberish],
    [boolean],
    "view"
  >;

  isInvestedGovernor: TypedContractMethod<
    [investor: AddressLike, governor: AddressLike],
    [boolean],
    "view"
  >;

  isInvestedGovernorInACampaign: TypedContractMethod<
    [investor: AddressLike, campaignId: BigNumberish, governor: AddressLike],
    [boolean],
    "view"
  >;

  joinCampaign: TypedContractMethod<
    [
      campaignId: BigNumberish,
      governor: AddressLike,
      descriptionHash: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  joinedCampaign: TypedContractMethod<
    [governorAddress: AddressLike],
    [bigint[]],
    "view"
  >;

  launchCampaign: TypedContractMethod<
    [
      startFunding: BigNumberish,
      duration: BigNumberish,
      tokenRaising: AddressLike,
      descriptionHash: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  nextCampaignId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setGovernorFactory: TypedContractMethod<
    [_governorFactory: AddressLike],
    [void],
    "nonpayable"
  >;

  state: TypedContractMethod<[campaignId: BigNumberish], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allocateFunds"
  ): TypedContractMethod<[campaignId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "campaignData"
  ): TypedContractMethod<
    [campaignId: BigNumberish],
    [
      [bigint, string, bigint, bigint, boolean, string, bigint[]] & {
        totalFunded: bigint;
        descriptionHash: string;
        fundStart: bigint;
        fundDuration: bigint;
        allocated: boolean;
        tokenRaising: string;
        governorIds: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "campaignFounders"
  ): TypedContractMethod<[campaignId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "campaignsOwn"
  ): TypedContractMethod<[_owner: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "courseData"
  ): TypedContractMethod<
    [campaignId: BigNumberish, governorId: BigNumberish],
    [ICampaign.CourseStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "fund"
  ): TypedContractMethod<
    [campaignId: BigNumberish, governorId: BigNumberish, amount: BigNumberish],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "governorFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[initialOwner_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "investedCampaignList"
  ): TypedContractMethod<
    [investor: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "investedGovernorInACampaignList"
  ): TypedContractMethod<
    [investor: AddressLike, campaignId: BigNumberish, arg2: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "investedGovernorList"
  ): TypedContractMethod<
    [investor: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "isInvestedCampaign"
  ): TypedContractMethod<
    [investor: AddressLike, campaignId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isInvestedGovernor"
  ): TypedContractMethod<
    [investor: AddressLike, governor: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isInvestedGovernorInACampaign"
  ): TypedContractMethod<
    [investor: AddressLike, campaignId: BigNumberish, governor: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "joinCampaign"
  ): TypedContractMethod<
    [
      campaignId: BigNumberish,
      governor: AddressLike,
      descriptionHash: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "joinedCampaign"
  ): TypedContractMethod<[governorAddress: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "launchCampaign"
  ): TypedContractMethod<
    [
      startFunding: BigNumberish,
      duration: BigNumberish,
      tokenRaising: AddressLike,
      descriptionHash: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "nextCampaignId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setGovernorFactory"
  ): TypedContractMethod<[_governorFactory: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "state"
  ): TypedContractMethod<[campaignId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "CampaignLaunched"
  ): TypedContractEvent<
    CampaignLaunchedEvent.InputTuple,
    CampaignLaunchedEvent.OutputTuple,
    CampaignLaunchedEvent.OutputObject
  >;
  getEvent(
    key: "Fund"
  ): TypedContractEvent<
    FundEvent.InputTuple,
    FundEvent.OutputTuple,
    FundEvent.OutputObject
  >;
  getEvent(
    key: "FundAllocated"
  ): TypedContractEvent<
    FundAllocatedEvent.InputTuple,
    FundAllocatedEvent.OutputTuple,
    FundAllocatedEvent.OutputObject
  >;
  getEvent(
    key: "GovernorJoined"
  ): TypedContractEvent<
    GovernorJoinedEvent.InputTuple,
    GovernorJoinedEvent.OutputTuple,
    GovernorJoinedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "CampaignLaunched(uint256)": TypedContractEvent<
      CampaignLaunchedEvent.InputTuple,
      CampaignLaunchedEvent.OutputTuple,
      CampaignLaunchedEvent.OutputObject
    >;
    CampaignLaunched: TypedContractEvent<
      CampaignLaunchedEvent.InputTuple,
      CampaignLaunchedEvent.OutputTuple,
      CampaignLaunchedEvent.OutputObject
    >;

    "Fund(uint256,uint256,uint256,uint256)": TypedContractEvent<
      FundEvent.InputTuple,
      FundEvent.OutputTuple,
      FundEvent.OutputObject
    >;
    Fund: TypedContractEvent<
      FundEvent.InputTuple,
      FundEvent.OutputTuple,
      FundEvent.OutputObject
    >;

    "FundAllocated(uint256,uint256[])": TypedContractEvent<
      FundAllocatedEvent.InputTuple,
      FundAllocatedEvent.OutputTuple,
      FundAllocatedEvent.OutputObject
    >;
    FundAllocated: TypedContractEvent<
      FundAllocatedEvent.InputTuple,
      FundAllocatedEvent.OutputTuple,
      FundAllocatedEvent.OutputObject
    >;

    "GovernorJoined(uint256,uint256)": TypedContractEvent<
      GovernorJoinedEvent.InputTuple,
      GovernorJoinedEvent.OutputTuple,
      GovernorJoinedEvent.OutputObject
    >;
    GovernorJoined: TypedContractEvent<
      GovernorJoinedEvent.InputTuple,
      GovernorJoinedEvent.OutputTuple,
      GovernorJoinedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
