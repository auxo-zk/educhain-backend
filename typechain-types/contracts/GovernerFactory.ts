/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface GovernerFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createGoverner"
      | "governer"
      | "hasGoverner"
      | "nextGovernerId"
      | "queuingPeriod"
      | "timelockPeriod"
      | "votingDelay"
      | "votingPeriod"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "GovernerCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "createGoverner",
    values: [string, string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "governer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasGoverner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nextGovernerId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "queuingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timelockPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingPeriod",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createGoverner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasGoverner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextGovernerId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queuingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timelockPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPeriod",
    data: BytesLike
  ): Result;
}

export namespace GovernerCreatedEvent {
  export type InputTuple = [
    governerId: BigNumberish,
    governer: AddressLike,
    founder: AddressLike,
    descriptionHash: BytesLike
  ];
  export type OutputTuple = [
    governerId: bigint,
    governer: string,
    founder: string,
    descriptionHash: string
  ];
  export interface OutputObject {
    governerId: bigint;
    governer: string;
    founder: string;
    descriptionHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GovernerFactory extends BaseContract {
  connect(runner?: ContractRunner | null): GovernerFactory;
  waitForDeployment(): Promise<this>;

  interface: GovernerFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createGoverner: TypedContractMethod<
    [
      name: string,
      tokenName: string,
      tokenSymbol: string,
      descriptionHash: BytesLike
    ],
    [bigint],
    "payable"
  >;

  governer: TypedContractMethod<[governerId: BigNumberish], [string], "view">;

  hasGoverner: TypedContractMethod<[governer: AddressLike], [boolean], "view">;

  nextGovernerId: TypedContractMethod<[], [bigint], "view">;

  queuingPeriod: TypedContractMethod<[], [bigint], "view">;

  timelockPeriod: TypedContractMethod<[], [bigint], "view">;

  votingDelay: TypedContractMethod<[], [bigint], "view">;

  votingPeriod: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createGoverner"
  ): TypedContractMethod<
    [
      name: string,
      tokenName: string,
      tokenSymbol: string,
      descriptionHash: BytesLike
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "governer"
  ): TypedContractMethod<[governerId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "hasGoverner"
  ): TypedContractMethod<[governer: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "nextGovernerId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "queuingPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "timelockPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "votingDelay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "votingPeriod"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "GovernerCreated"
  ): TypedContractEvent<
    GovernerCreatedEvent.InputTuple,
    GovernerCreatedEvent.OutputTuple,
    GovernerCreatedEvent.OutputObject
  >;

  filters: {
    "GovernerCreated(uint256,address,address,bytes32)": TypedContractEvent<
      GovernerCreatedEvent.InputTuple,
      GovernerCreatedEvent.OutputTuple,
      GovernerCreatedEvent.OutputObject
    >;
    GovernerCreated: TypedContractEvent<
      GovernerCreatedEvent.InputTuple,
      GovernerCreatedEvent.OutputTuple,
      GovernerCreatedEvent.OutputObject
    >;
  };
}
